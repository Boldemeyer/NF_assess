filter(sthd),
aes(color = sthd_per_m2),
size = 1) +
scale_color_viridis_c(direction = -1) +
#theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()) +
labs(title = "Steelhead, Winter Juveniles",
color = expression(`Winter Juv` / m^2))
# steelhead redds
sthd_redd_map = NF_redd_sf %>%
ggplot() +
geom_sf(data = NF_huc_sf %>%
st_union() %>%
nngeo::st_remove_holes(),
fill = NA,
color = "gray50") +
geom_sf(color = river_color) +
geom_sf(data = NF_redd_sf %>%
filter(sthd) %>%
mutate(sthd_per_km = sthd_per_m * 1000),
aes(color = sthd_per_km),
size = 1) +
scale_color_viridis_c(direction = -1) +
#theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()) +
labs(title = "Steelhead, Redds",
color = expression(Redds / km))
```
```{r chnk-maps, fig.cap = "Extrapolations of habitat capacity for Chinook salmon, by life-stage, within the Upper Walla Walla watershed."}
ggarrange(chnk_sum_map,
chnk_win_map,
chnk_redd_map)
```
```{r sthd-maps, fig.cap = "Extrapolations of habitat capacity for steelhead, by life-stage, within the Upper Walla Walla watershed."}
ggarrange(sthd_sum_map,
sthd_win_map,
sthd_redd_map)
```
## Capacity Limitations
Finally, habitat capacity limitations were quantified by subtracting required capacity from available capacity (Table \@ref(tab:cap-limits)). When required capacity exceeded available capacity, this represented a habitat capacity deficit in the North Fork Salmon watershed. Deficits can be used to identify potential species and life-stage limitations in physical habitat quantity and/or quality. Relative habitat capacity deficits were also calculated as available capacity divided by required capacity (Table \@ref(tab:cap-limits)) to provide guidance on species and life-stages where rehabilitation efforts could be targeted.
```{r cap-limits}
rec_goals %>%
left_join(cap_totals %>%
select(-n_rchs,
-tot_length)) %>%
mutate(Deficit = Abundance - tot_cap,
`Relative Deficit` = Deficit / tot_cap) %>%
rename(`Required Capacity` = Abundance,
`Available Capacity` = tot_cap,
`Capacity SE` = tot_cap_se) %>%
kable(booktabs = T,
digits = c(0,0,0,0,0,0,0,2),
align = "cccccccc",
format.args = list(big.mark = ","),
col.names = c("Species","Scenario","Life-stage","Required Capacity","Available Capacity","Capacity SE","Deficit","Relative Deficit"),
caption = "Capacity deficits and relative deficits based on recovery goals.") %>%
kable_styling(full_width = F,
position = "center",
bootstrap_options = c("striped", "condensed"))
```
Comparisons of available and required capacity by life-stage are shown in Figures \@ref(fig:chnk-def-fig) and \@ref(fig:sthd-def-fig).
```{r chnk-def-fig, fig.cap = "Estimated available capacity given current habitat conditions for Chinook salmon at three life-stages in the Upper Walla Walla watershed. Available capacity was calculated using a quantile random forest (QRF) approach, and required capacity was calculated using a Generalized Capacity Model with adult escapement goals."}
chnk_def_p = rec_goals %>%
select(-Scenario) %>%
filter(Species == "Chinook",
LifeStage %in% c("Redds",
"Summer Juveniles",
"Winter Juveniles")) %>%
left_join(cap_totals %>%
select(-n_rchs,
-tot_length)) %>%
select(!Species) %>%
rename(Required = Abundance,
Available = tot_cap,
se = tot_cap_se) %>%
pivot_longer(cols = c("Required",
"Available")) %>%
mutate(se = ifelse(name == "Required", NA, se)) %>%
select(LifeStage, name, value, se) %>%
ggplot() +
geom_bar(aes(x = name,
y = value,
fill = name),
color = "black",
stat = "identity") +
scale_x_discrete(limits = rev) +
scale_fill_manual(name = "Capacity",
values = c("gray30", "forestgreen")) +
coord_flip() +
facet_wrap(~ LifeStage,
scales = "free",
ncol = 1,
strip.position = "left",
labeller = labeller(LifeStage = label_wrap_gen(width = 10))) +
geom_errorbar(aes(x = name,
ymin = value - 1.96 * se,
ymax = value + 1.96 * se),
width = 0,
size = 0.5) +
scale_y_continuous(labels = scales::comma,
expand = c(0,0)) +
labs(title = "Chinook salmon") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(size = 8,
color = "black"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
strip.text.y = element_text(size = 10),
plot.title = element_text(size = 12,
face = "bold"),
legend.position = "right")
chnk_def_p
```
```{r sthd-def-fig, fig.cap = "Estimated available capacity given current habitat conditions for steelhead at three life-stages in the Upper Walla Walla watershed. Available capacity was calculated using a quantile random forest (QRF) approach, and required capacity was calculated using a Generalized Capacity Model with adult escapement goals."}
sthd_def_p = rec_goals %>%
select(-Scenario) %>%
filter(Species == "Steelhead",
LifeStage %in% c("Redds",
"Summer Juveniles",
"Winter Juveniles")) %>%
left_join(cap_totals %>%
select(-n_rchs,
-tot_length)) %>%
select(!Species) %>%
rename(Required = Abundance,
Available = tot_cap,
se = tot_cap_se) %>%
pivot_longer(cols = c("Required",
"Available")) %>%
mutate(se = ifelse(name == "Required", NA, se)) %>%
select(LifeStage, name, value, se) %>%
ggplot() +
geom_bar(aes(x = name,
y = value,
fill = name),
color = "black",
stat = "identity") +
scale_x_discrete(limits = rev) +
scale_fill_manual(name = "Capacity",
values = c("gray30", "dodgerblue3")) +
coord_flip() +
facet_wrap(~ LifeStage,
scales = "free",
ncol = 1,
strip.position = "left",
labeller = labeller(LifeStage = label_wrap_gen(width = 10))) +
geom_errorbar(aes(x = name,
ymin = value - 1.96 * se,
ymax = value + 1.96 * se),
width = 0,
size = 0.8) +
scale_y_continuous(labels = scales::comma,
expand = c(0,0)) +
labs(title = "Steelhead") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(size = 8,
color = "black"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10),
strip.text.y = element_text(size = 10),
plot.title = element_text(size = 12,
face = "bold"),
legend.position = "right")
sthd_def_p
```
## Further Considerations
-   The current required capacity estimates from the Generalized Capacity Model are considered tentative for the following reasons:
-   We are currently exploring options to add appropriate uncertainty to parameters used in the Generalized Capacity Model which would result in distributions for corresponding required capacity estimates. Required capacity distributions may be added to a future draft.
-   Similarly, current available habitat capacity estimates from the QRF and extrapolation models are considered (very) tentative:
-   Improvements to the QRF model are scheduled for spring/summer 2022, including modifications to the list of QRF covariates (Table \@ref(tab:cov-tab)) used in each. Potential changes to QRF model covariates will accommodate: 1) using metrics collected by drone-supported stream habitat monitoring protocols currently in place [e.g., DASH, @Carmichael2019], 2) using metrics that are useful or meaningful for project design or target conditions, and/or 3) using covariates with predictive power for estimating capacity.
-   The extrapolation model uses an anadromous spatial domain defined by [StreamNet](https://www.streamnet.org/home/data-maps/gis-data-sets/). However, those domains are provided by StreamNet partners, and to the best our knowledge, can be informed by disparate datasets and/or be driven by differing research questions (e.g., defining observed versus potential available habitat). If better information is available to define a spatial distribution in the Upper Walla Walla watershed, those spatial domains can be updated. Increasing or decreasing the modeled spatial domain would likely result in increased or decreased capacity estimates, respectively.
-   Additional GAA parameters may become available for capacity extrapolations in 2022, and if so, we would consider adding those to our spatially continuous linear network. We are also interested in evaluating sensitivity of the extrapolation model to various covariate combinations.
-   The available capacity tables in the [Supplemental Tables and Figures](#supplemental-tables-and-figures) section, which provide estimates by stream, contain some reaches where the stream name is `NA`. If necessary, we could QC those stream reaches and identify whether they fall on a named stream.
# Stream Temperature Assessment
## Approach
Taken directly from the SOW:
*The QRF and extrapolation models can be run under existing climate conditions (i.e., assuming current predicted stream water temperatures), as well as under predicted future climate scenarios by incorporating Northwest Stream Temperature (NorWeST) thermal models. Doing so would allow us to compare current predicted habitat capacities to those capacities under various stream temperature warming scenarios, also by species and life-stage. We could also run the QRF model under a theoretical scenario where summer stream temperatures were decreased (e.g., by 1Â°C) to examine the influence if rehabilitation actions were able to remediate increased summer temperatures. The result would be an evaluation of changes in capacity for Chinook salmon and steelhead under current conditions, a predicted future warming scenario, and a theoretical cooling scenario. This evaluation would only be completed for the summer and spawning (redd) life-stages as the NorWeST model provides information on summer stream temperatures. Additionally, optimal and acute temperature thresholds for summer life-stages of Chinook salmon, steelhead, bull trout, and Pacific lamprey could be compared to available NorWeST temperature models using the aforementioned climate scenarios.*
```{=html}
<!--
Finally, a NorWeST summer stream temperature model was used to describe changes in predicted capacity for target species given various changing climate scenarios [@Isaak2012; @Peterson2013; @Isaak2017]
-->
```
# Limited Species and Life-Stages
What are the limited species and life-stages and why? Include results from a literature review, the habitat capacity assessment, and the stream temperature assessment.
## Target Conditions to Address Limiting Factors
How do we address the identified limiting factors?
# Discussion
Discussion text here...
# Literature Cited
<!-- The following line ensures the references appear here for the MS Word or HTML output files, rather than right at the end of the document (this will not work for PDF files):  -->
::: {#refs}
:::
# Supplemental Tables and Figures {#supplemental-tables-and-figures}
## QRF Habitat Capacity Estimates
### Chinook Salmon
```{r chnk-sum-tbl}
chnk_sum_cap %>%
subset(!StreamName == "Total" | is.na(StreamName)) %>%
adorn_totals() %>%
mutate(tot_length = tot_length / 1000) %>%
rename(`n Reaches` = n_rchs,
`Stream Length (km)` = tot_length,
Capacity = tot_cap,
`Capacity SE` = tot_cap_se) %>%
kable(booktabs = T,
digits = c(0,0,1,0,0),
align = "lcccc",
format.args = list(big.mark = ","),
col.names = c("Stream Name","Reaches","Stream Length (km)", "Capacity","Capacity SE"),
caption = "Estimated available habitat for **juvenile summer rearing** Chinook salmon in the North Fork Salmon watershed.") %>%
kable_styling(full_width = F,
position = "center",
bootstrap_options = c("striped", "condensed"))
```
```{r chnk-win-tbl}
chnk_win_cap %>%
subset(!StreamName == "Total" | is.na(StreamName)) %>%
adorn_totals() %>%
mutate(tot_length = tot_length / 1000) %>%
rename(`n Reaches` = n_rchs,
`Stream Length (km)` = tot_length,
Capacity = tot_cap,
`Capacity SE` = tot_cap_se) %>%
kable(booktabs = T,
digits = c(0,0,1,0,0),
align = "lcccc",
format.args = list(big.mark = ","),
col.names = c("Stream Name","Reaches","Stream Length (km)", "Capacity","Capacity SE"),
caption = "Estimated available habitat for **juvenile winter rearing** Chinook salmon in the North Fork Salmon watershed.") %>%
kable_styling(full_width = F,
position = "center",
bootstrap_options = c("striped", "condensed"))
```
```{r chnk-redd-tbl}
chnk_redd_cap %>%
subset(!StreamName == "Total" | is.na(StreamName)) %>%
adorn_totals() %>%
mutate(tot_length = tot_length / 1000) %>%
rename(`n Reaches` = n_rchs,
`Stream Length (km)` = tot_length,
Capacity = tot_cap,
`Capacity SE` = tot_cap_se) %>%
kable(booktabs = T,
digits = c(0,0,1,0,0),
align = "lcccc",
format.args = list(big.mark = ","),
col.names = c("Stream Name","Reaches","Stream Length (km)", "Capacity","Capacity SE"),
caption = "Estimated available **spawning (redds)** habitat for Chinook salmon in the North Fork Salmon watershed.") %>%
kable_styling(full_width = F,
position = "center",
bootstrap_options = c("striped", "condensed"))
```
### Steelhead
```{r sthd-sum-tbl}
sthd_sum_cap %>%
subset(!StreamName == "Total" | is.na(StreamName)) %>%
adorn_totals() %>%
mutate(tot_length = tot_length / 1000) %>%
rename(`n Reaches` = n_rchs,
`Stream Length (km)` = tot_length,
Capacity = tot_cap,
`Capacity SE` = tot_cap_se) %>%
kable(booktabs = T,
digits = c(0,0,1,0,0),
align = "lcccc",
format.args = list(big.mark = ","),
col.names = c("Stream Name","Reaches","Stream Length (km)", "Capacity","Capacity SE"),
caption = "Estimated available habitat for **juvenile summer rearing** steelhead in the North Fork Salmon watershed.") %>%
kable_styling(full_width = F,
position = "center",
bootstrap_options = c("striped", "condensed"))
```
```{r sthd-win-tbl}
sthd_win_cap %>%
subset(!StreamName == "Total" | is.na(StreamName)) %>%
adorn_totals() %>%
mutate(tot_length = tot_length / 1000) %>%
rename(`n Reaches` = n_rchs,
`Stream Length (km)` = tot_length,
Capacity = tot_cap,
`Capacity SE` = tot_cap_se) %>%
kable(booktabs = T,
digits = c(0,0,1,0,0),
align = "lcccc",
format.args = list(big.mark = ","),
col.names = c("Stream Name","Reaches","Stream Length (km)", "Capacity","Capacity SE"),
caption = "Estimated available habitat for **juvenile winter rearing** steelhead in the North Fork Salmon watershed.") %>%
kable_styling(full_width = F,
position = "center",
bootstrap_options = c("striped", "condensed"))
```
```{r sthd-redd-tbl}
sthd_redd_cap %>%
subset(!StreamName == "Total" | is.na(StreamName)) %>%
adorn_totals() %>%
mutate(tot_length = tot_length / 1000) %>%
rename(`n Reaches` = n_rchs,
`Stream Length (km)` = tot_length,
Capacity = tot_cap,
`Capacity SE` = tot_cap_se) %>%
kable(booktabs = T,
digits = c(0,0,1,0,0),
align = "lcccc",
format.args = list(big.mark = ","),
col.names = c("Stream Name","Reaches","Stream Length (km)", "Capacity","Capacity SE"),
caption = "Estimated available **spawning (redds)** habitat for steelhead in the North Fork Salmon watershed.") %>%
kable_styling(full_width = F,
position = "center",
bootstrap_options = c("striped", "condensed"))
```
install.packages("installr")
library(installr)
install.pandoc(
URL = "https://github.com/jgm/pandoc/releases",
use_regex = TRUE,
to_restart
)
install.pandoc()
pandoc_version()
library(rmarkdown)
pandoc_version()
pandoc_version()
library(tinytex)
install_tinytex()
# This is script that inputs USGS stream data using USGS-dataRetrieval package and outputs figures and summary statistics for the selected stations
library(plyr)
library(zoo)
# Install devtools to retrieve latest version of USGS-dataRetrieval via github
# install.packages(devtools)
# Use devtools to install the latest version of USGS-dataRetrieval via github
# library(devtools)
# install_github("USGS-R/dataRetrieval")
# Update all packages via "tools>Check for package updates>update all" if you are having issues installing dataRetrieval
# using the "install_github() function
library(dataRetrieval)
rm(list=ls()) #Clear global environment
setwd("C:/Users/bolde/Documents/Git/Auto_email_notif/data/output") #Set working directory and get to work!
# Sites below Palisades
# LOR Lorenzo 13038500
# HEI Heise 13037500
# IRWN Irwin 13032500
# Sites above Palisades
# SALT River 13027500
# GREY Greys River 13023000
# ALP Snake nr Alpine 13022500
# JKSY Snake nr Flat Creek 13018750
# JCK Snake nr Moran (Jackson Lake at Dam) 13011000
# FLG Snake nr Flag Ranch (above Jackson Lake) 13010065
# Parameter codes for dataRetrieval
# Discharge = "00060"
# Gage height = "00065"
# Temperature = "00010"
# Precipitation = "00045"
# pH = "00400"
# Stat codes for dataRetrieval
# Max = "00001"
# Min = "00002"
# Mean = "00003"
# Median = "00008"
nat.flow.sites<-c("13010065","13011000","13018750","13022500","13023000","13027500","13032500","13037500","13038500")
site.table <- as.data.frame(seq(from = as.Date("1978-10-01", format="%Y-%m-%d"),
to = Sys.Date(),
by = "days"))
names(site.table)[1] <- "Date"
for(siteNumber in nat.flow.sites){
data<- readNWISdv(siteNumber, parameterCd="00060", startDate = "1978-10-01")
data<-data[,3:4]
site.table<-merge.data.frame(site.table, data, by="Date", all = T)
}
#names(site.table)[2:10] <- c("FLG","JCK","JKSY","ALP","GREY","SALT","IRWN","HEI","LOR")
site.list<-c("Flagg Ranch, Snake River","Jackson Lake at Dam, Snake River","Flat Creek, Snake River",
"Alpine, Snake River","Greys River","Salt River","Irwin, South Fork Snake",
"Heise, South Fork Snake","Lorenzo, South Fork Snake")
names(site.table)[2:10] <- site.list
site.table$Date<-as.POSIXlt(as.character(site.table$Date), format="%Y-%m-%d")#Format date
####### Start loop here if you want water flow figure for each
for(siteName in site.list){
input<-site.table[,c("Date",siteName)]
ndays<-dim(input)[1]
firstday<-as.POSIXlt(as.character(input$Date[1]))$yday+1
lastday<-as.POSIXlt(as.character(input$Date[ndays]))$yday+1
lastyear<-as.POSIXlt(as.character(input$Date[ndays]))$year+1900
firstyear<-as.POSIXlt(as.character(input$Date[1]))$year+1900
leap.years<-seq(firstyear+(4-firstyear%%4)%%4,lastyear,4)
if((lastday>274)|((lastday==274)&!(lastyear %in% leap.years))){lastwy<-lastyear+1}else{
lastwy<-lastyear}
if((firstday<274)|((firstday==274)&(firstyear %in% leap.years))){firstwy<-firstyear}else{
firstwy<-firstyear+1}
nwy<-lastwy-firstwy+1
nwy
out<-data.frame(array(NA,c(365+6,nwy+6)))
rownames(out)[1:365]<-format(seq(as.Date("2014-10-01"),as.Date("2015-09-30"),1),"%b-%d")
rownames(out)[366:371]<-c("Min","Q1","Median","Mean","Q3","Max")
colnames(out)[1:nwy]<-as.character(firstwy:lastwy)
colnames(out)[(nwy+1):(nwy+6)]<-c("Min","Q1","Median","Mean","Q3","Max")
dates_fill <- as.data.frame(seq(from = min(as.Date(input$Date, format="%Y-%m-%d")),
to = max(as.Date(input$Date, format="%Y-%m-%d")),
by = "days"))
names(dates_fill) <- c("Date")
input$Date<-as.Date(input$Date)
input = merge(input, dates_fill, by="Date", all= TRUE)
for(j in 1:(nwy-1)){           #For each water year up until the last one
if(firstwy+(j-1) %in% leap.years){   #If we're in a leap year
dates<-c(seq(as.Date(paste(as.character(firstwy+(j-2)),"-10-01",sep="")),as.Date(paste(as.character(firstwy+(j-1)),"-02-28",sep="")),1),
seq(as.Date(paste(as.character(firstwy+(j-1)),"-03-01",sep="")),as.Date(paste(as.character(firstwy+(j-1)),"-09-30",sep="")),1))}else{
dates<-seq(as.Date(paste(as.character(firstwy+(j-2)),"-10-01",sep="")),as.Date(paste(as.character(firstwy+(j-1)),"-09-30",sep="")),1)
}
out[1:365,j]<-input[input$Date %in% dates,2]
}
#
# Now for the last water year
#
if((lastwy %in% leap.years)&(lastday>=61)&(lastday<=274)){
dates<-c(seq(as.Date(paste(as.character(lastwy-1),"-10-01",sep="")),as.Date(paste(as.character(lastwy),"-02-28",sep="")),1),
seq(as.Date(paste(as.character(lastwy),"-03-01",sep="")),max(input$Date),1))}else{
dates<-seq(as.Date(paste(as.character(lastwy-1),"-10-01",sep="")),
max(input$Date),1)
}
out[1:length(dates),nwy]<-input[input$Date %in% dates,2]
#
#
#Now the summaries
#
#
for(k in 1:365){
out[k,(nwy+1):(nwy+6)]<-apply(out[k,1:nwy],1,summary)[1:6]}
for(k in 1:nwy){
if((is.na(out[1,k])==FALSE)&(is.na(out[365,k])==FALSE)){
out[(365+1):(365+6),k]<-apply(as.matrix(out[1:365,k]),2,summary)[1:6]
}
}
write.csv(out, paste(siteName,"_Flow_WY.csv"))
first<-as.Date("2018-10-01")
last<-as.Date("2019-09-30")
pcol<-ncol(out)
plot.data<-out[1:365,(pcol-7):pcol]
plot.data$Day <- as.Date(rownames(plot.data), format="%b-%d")
plot.data$Day<-seq(first,last,1)
names(plot.data)[2] <- "Y2021"
names(plot.data)[1] <- "Y2020"
dates.plot<-plot.data$Day
png(filename = paste(siteName," Discharge.png", sep = ""),
width = 7.5, height = 5.5,units = "in", pointsize = 12,
bg = "white", res = 600, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"), antialias="cleartype")
plot(plot.data$Day, plot.data$Mean, type="n",
ylim=c(0,max(plot.data$Max)), ylab="Discharge (cfs)",
xlab="Date", main=siteName, cex.lab=1.2, cex.main=1.4, xaxt='n')
axis.Date(1,dates.plot,seq(first,last+1,"month"),format="%b-%d")
polygon(c(plot.data$Day, rev(plot.data$Day)),
c(plot.data$Max,rev(plot.data$Min)),
col = "grey90", border = NA)
abline(h=seq(0,max(plot.data$Max),(max(plot.data$Max)/8)),lty=2, col="gray85")
abline(v=seq(first,last+1,"month"),col="gray85",lty=2)
abline(h=0)
lines(plot.data$Day,plot.data$Y2020,lwd=1.5,lty=2,col="green4")
lines(plot.data$Day,plot.data$Mean,lwd=1.5,lty=3,col="red")
lines(plot.data$Day,plot.data$Y2021,lwd=2.5,col="blue")
legend("topleft", col = c("blue","green4","red",NA), lty = c(1,2,3,NA),bg="white",box.col=1,
lwd = c(2.5,1.5,1.5,NA),fill=c(NA,NA,NA,"gray90"),border=c(NA,NA,NA,"gray90"),
legend = c( paste("2021 through", Sys.Date()),"2020 actual","1978-2020 average","1978-2020 range"))
dev.off()
}
#######################################################################
#
# Send an automatic email saying flows out of Palisades are over or under 1500 cfs
#
#######################################################################
library(gmailr)
library(glue)
gm_auth_configure(path = "C:/Users/bolde/Documents/Google_API_file/client_secret_gmailR.json")
email_text_body_over<- glue("This is an automated email reporting that mean daily flow out of Palisades Dam is >= 1,500 cfs. If this is working
properly, this email should be sent on 4/11/2022 @ 0900 mdt.")
email_over <- gm_mime() %>%
gm_to("Bryce.Oldemeyer@gmail.com", "Bryce.Oldemeyer@mthoodenvironmental.com") %>%
#  gm_cc("tara.blackman@mthoodenvironmental.com") %>%
#  gm_cc("ian.courter@mthoodenvironmental.com") %>%
gm_from("Bryce.Oldemeyer@gmail.com") %>%
gm_subject("Palisades flow over 1500 cfs -- TEST FLOW NOTIFICATION --") %>%
gm_text_body(email_text_body_over) %>%
gm_attach_file("C:/Users/bolde/Documents/Git/Auto_email_notif/data/output/Irwin, South Fork Snake Discharge.png") %>%
gm_attach_file("C:/Users/bolde/Documents/Git/Auto_email_notif/data/output/Irwin, South Fork Snake _Flow_WY.csv")
gm_send_message(email_over)
mail_text_body_over<- glue("This is an automated email reporting that mean daily flow out of Palisades Dam is >= 1,500 cfs. If this is working
properly, this email should be sent on 4/11/2022 @ 0900 mdt.")
email_over <- gm_mime() %>%
gm_to(c("Bryce.Oldemeyer@gmail.com", "Bryce.Oldemeyer@mthoodenvironmental.com")) %>%
#  gm_cc("tara.blackman@mthoodenvironmental.com") %>%
#  gm_cc("ian.courter@mthoodenvironmental.com") %>%
gm_from("Bryce.Oldemeyer@gmail.com") %>%
gm_subject("Palisades flow over 1500 cfs -- TEST FLOW NOTIFICATION --") %>%
gm_text_body(email_text_body_over) %>%
gm_attach_file("C:/Users/bolde/Documents/Git/Auto_email_notif/data/output/Irwin, South Fork Snake Discharge.png") %>%
gm_attach_file("C:/Users/bolde/Documents/Git/Auto_email_notif/data/output/Irwin, South Fork Snake _Flow_WY.csv")
gm_send_message(email_over)
library(taskscheduleR)
taskscheduler_delete("SF_flow_example") # Delete task
taskscheduler_create(taskname = "SF_flow_example", rscript = "C:/Users/bolde/Documents/Git/Auto_email_notif/2_auto_processing.R",
schedule = "DAILY", starttime = "10:30", startdate = "04/11/2022")
rm(list = ls())
